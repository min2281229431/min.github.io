""" """
import numpy as np
import scipy.stats as st
import pandas as pd
import statsmodels.api as sm
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.integrate as integ   # 导入求积分的包

# ==================================================================================================================== #
# 一、绘制正态分布的概率密度图像
# 构建服从正态分布的概率密度函数的值，均值mu为1，标准差sigma为0.5
x = np.arange(-2, 4, 0.01)
# 根据x计算正态分布的概率密度函数
n_density = (1 / (((2 * np.pi) ** 0.5) * 0.5)) * np.exp((-(x - 1) ** 2) / (2 * (0.5 ** 2)))  # 第1个公式f(x)
# 正态分布的密度函数曲线，后面还有更具体的图形例子
print('正态分布概率密度函数曲线(均值:1，标准差:0.5)：')
plt.plot(x, n_density)
plt.show()

# 二、求累计分布函数
# 累积分布函数的计算,设x0=1.5，则F(x0)=P(x<1.5)
# 即求概率密度函数f(x)在(-Inf,1.5]区间的积分
# 定义概率密度函数（被积分的函数）
def nf(x, mu, sigma):
    return (1 / (((2 * np.pi) ** (0.5)) * sigma)) * np.exp((-(x - mu) ** 2) / (2 * (sigma ** 2)))

# 累积分布函数是对概率密度函数求积分（针对连续型随机变量，离散型随机变量是求和）
n_distrib = integ.quad(nf, float('-Inf'), 1.5, args=(1, 0.5))[0]  # 第二个公式F(x)的实现
print('手工计算分布函数的值：', n_distrib)




# ==================================================================================================================== #
"""
Scipy的子包stats下的norm表示正态分布，norm包含几乎所有正态分布计算的函数。
类似的还有t、F、chi2等子包对应其他各种分布
"""
# 直接调用Scipy的累积分布函数
n_distrib_scipy = st.norm.cdf(1.5, 1, 0.5)
print('Scipy函数计算正态分布的累积分布函数的值：', n_distrib_scipy)

# ==================================================================================================================== #
# Scipy有关概率分布的其他应用
print('服从正态分布的随机数生成：', st.norm.rvs(1, 0.5, 5))

print('概率密度函数(显示前10个)：', st.norm.pdf(x, 0.5, 1)[0:10])
print('生存函数：', st.norm.sf(1.5, 1, 0.5))  # sf=1-cdf
print('分位数函数：', st.norm.ppf(0.84, 1, 0.5))  # 注意：通常都是通过下分位数（下尾）计算分位数。

# 该分布下随机变量有95%的可能性位于该区间
print('置信度0.95的置信区间：', st.norm.interval(0.95, 1, 0.5))
